using LinearAlgebraicRepresentation
Lar = LinearAlgebraicRepresentation
using SparseArrays;
using ViewerGL, LinearAlgebra
GL = ViewerGL

A=SparseArrays.sparse([1, 3, 9, 1, 4, 10, 2, 3, 11, 2, 4, 12, 5, 7, 9, 5, 8, 10, 6, 7, 11, 6, 8, 12, 13, 15, 25, 13, 16, 26, 14, 15, 27, 14, 16, 29, 17, 20, 25, 17, 22, 26, 18, 21, 28, 19, 22, 29, 18, 19, 23, 31, 20, 21, 24, 33, 23, 24, 74, 75, 27, 28, 30, 32, 30, 31, 71, 72, 32, 33, 81, 82, 34, 36, 42, 34, 37, 43, 35, 36, 44, 35, 37, 45, 38, 40, 42, 38, 41, 43, 39, 40, 44, 39, 41, 45, 46, 48, 58, 46, 49, 59, 47, 48, 62, 47, 49, 63, 50, 53, 58, 51, 54, 60, 50, 51, 56, 61, 52, 53, 62, 52, 55, 63, 54, 55, 57, 65, 56, 57, 79, 80, 59, 60, 61, 64, 64, 65, 78, 79, 66, 68, 76, 66, 69, 77, 67, 68, 78, 67, 69, 81, 70, 73, 76, 70, 74, 77, 71, 73, 80, 72, 75, 82], [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10, 10, 11, 11, 11, 12, 12, 12, 13, 13, 13, 14, 14, 14, 15, 15, 15, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 22, 23, 23, 23, 24, 24, 24, 25, 25, 25, 26, 26, 26, 27, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 31, 31, 31, 32, 32, 32, 33, 33, 33, 34, 34, 34, 35, 35, 35, 36, 36, 36, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 40, 40, 40, 40, 41, 41, 41, 41, 42, 42, 42, 42, 43, 43, 43, 43, 44, 44, 44, 45, 45, 45, 46, 46, 46, 47, 47, 47, 48, 48, 48, 49, 49, 49, 50, 50, 50, 51, 51, 51], Int8[-1, -1, -1, 1, -1, -1, -1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, -1, 1, 1, 1, 1, 1, -1, -1, -1, 1, -1, -1, -1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, -1, -1, -1, 1, -1, -1, -1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, -1, 1, 1, 1, 1, 1, -1, -1, -1, 1, -1, -1, -1, 1, -1, 1, 1, -1, -1, -1, 1, -1, -1, -1, 1, 1, -1, -1, -1, 1, 1, 1, -1, 1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, 1, -1, 1, 1, -1, 1, -1, -1, -1, 1, -1, -1, -1, 1, 1, 1, 1, 1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])

B=SparseArrays.sparse([1, 3, 1, 4, 1, 5, 1, 6, 2, 3, 2, 4, 2, 5, 2, 6, 3, 5, 3, 6, 4, 5, 4, 6, 7, 10, 7, 11, 7, 13, 7, 15, 8, 10, 9, 12, 8, 11, 8, 13, 9, 14, 8, 15, 8, 9, 32, 33, 8, 9, 40, 41, 10, 13, 10, 15, 11, 13, 12, 14, 11, 15, 11, 12, 35, 36, 11, 12, 32, 33, 13, 14, 35, 36, 13, 14, 40, 41, 16, 18, 16, 19, 16, 20, 16, 21, 17, 18, 17, 19, 17, 20, 17, 21, 18, 20, 18, 21, 19, 20, 19, 21, 22, 25, 22, 27, 22, 28, 22, 29, 23, 25, 24, 26, 23, 27, 23, 28, 24, 30, 23, 29, 23, 24, 38, 39, 23, 24, 35, 37, 25, 28, 25, 29, 26, 30, 25, 26, 38, 39, 27, 28, 27, 29, 29, 30, 38, 39, 29, 30, 35, 37, 31, 34, 31, 35, 31, 38, 31, 40, 32, 34, 32, 35, 33, 36, 32, 38, 32, 40, 33, 41, 34, 38, 34, 40, 35, 38, 37, 39, 35, 38, 35, 40, 36, 41], [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 23, 23, 24, 24, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 30, 30, 30, 31, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 35, 35, 36, 36, 37, 37, 38, 38, 39, 39, 40, 40, 41, 41, 42, 42, 43, 43, 44, 44, 45, 45, 46, 46, 47, 47, 48, 48, 49, 49, 50, 50, 51, 51, 52, 52, 53, 53, 54, 54, 55, 55, 56, 56, 56, 56, 57, 57, 57, 57, 58, 58, 59, 59, 60, 60, 61, 61, 61, 61, 62, 62, 63, 63, 64, 64, 64, 64, 65, 65, 65, 65, 66, 66, 67, 67, 68, 68, 69, 69, 70, 70, 71, 71, 72, 72, 73, 73, 74, 74, 75, 75, 76, 76, 77, 77, 78, 78, 79, 79, 80, 80, 81, 81, 82, 82], Int8[1, 1, -1, 1, -1, 1, 1, 1, 1, -1, -1, -1, -1, -1, 1, -1, -1, -1, 1, -1, -1, 1, 1, 1, 1, 1, -1, 1, -1, 1, 1, 1, 1, -1, -1, -1, 1, 1, -1, -1, 1, 1, 1, -1, 1, -1, -1, 1, -1, 1, 1, -1, -1, -1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1, 1, -1, 1, -1, 1, -1, 1, -1, -1, 1, -1, 1, -1, 1, 1, 1, -1, 1, -1, 1, 1, 1, 1, -1, -1, -1, -1, -1, 1, -1, -1, -1, 1, -1, -1, 1, 1, 1, 1, 1, -1, 1, -1, 1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, -1, -1, 1, -1, -1, 1, -1, 1, -1, 1, -1, 1, 1, 1, -1, 1, -1, 1, 1, -1, 1, -1, 1, 1, -1, 1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, 1, -1, 1, -1, 1, -1, -1, 1, -1, -1, 1, 1])

#AB = Lar.blockdiag_di_nardo(A,B)

#@show AB

V = [0.5872165 0.3971089 0.7513519 0.5612443 0.8680828 0.6779753 1.0322182 0.8421107 0.6899599 0.502989 0.8326865 0.6457156 0.8586244 0.6716535 1.001351 0.8143801 0.7034275 0.5062553 0.5414431 0.3442709 0.9368317 0.7396595 0.7748473 0.5776751 0.5361978 0.3644763 0.5783999 0.4066785 0.5468975 0.375176 0.5890997 0.4173782; 0.7362077 0.9003431 1.0654701 1.2296055 0.6548871 0.8190224 0.9841495 1.1482849 0.2417823 0.3845089 0.4884655 0.6311921 0.1912528 0.3339794 0.4379359 0.5806626 0.2712775 0.1092931 0.5687776 0.4067931 0.3409058 0.1789214 0.6384059 0.4764215 0.2867544 0.3289566 0.4588041 0.5010062 0.2854601 0.3276623 0.4575098 0.4997119; 0.5347294 0.8155957 0.4534087 0.7342751 0.7723598 1.0532262 0.6910392 0.9719055 0.0757586 0.2444231 0.0252291 0.1938936 0.3054883 0.4741529 0.2549588 0.4236233 0.6584519 0.8918561 0.7280803 0.9614845 0.9039468 1.137351 0.9735751 1.2069793 0.1554979 0.1661976 0.1542036 0.1649033 0.3323244 0.3430241 0.3310301 0.3417298]

CV = Array{Int64,1}[[1, 2, 3, 4, 5, 6, 7, 8], [9, 10, 11, 12, 13, 14, 15, 16], [17, 18, 19, 20, 21, 22, 23, 24], [25, 26, 27, 28, 29, 30, 31, 32]]

FV = Array{Int64,1}[[1, 2, 3, 4], [5, 6, 7, 8], [1, 2, 5, 6], [3, 4, 7, 8], [1, 3, 5, 7], [2, 4, 6, 8], [9, 10, 11, 12], [13, 14, 15, 16], [9, 10, 13, 14], [11, 12, 15, 16], [9, 11, 13, 15], [10, 12, 14, 16], [17, 18, 19, 20], [21, 22, 23, 24], [17, 18, 21, 22], [19, 20, 23, 24], [17, 19, 21, 23], [18, 20, 22, 24], [25, 26, 27, 28], [29, 30, 31, 32], [25, 26, 29, 30], [27, 28, 31, 32], [25, 27, 29, 31], [26, 28, 30, 32]]

EV = Array{Int64,1}[[1, 2], [3, 4], [5, 6], [7, 8], [1, 3], [2, 4], [5, 7], [6, 8], [1, 5], [2, 6], [3, 7], [4, 8], [9, 10], [11, 12], [13, 14], [15, 16], [9, 11], [10, 12], [13, 15], [14, 16], [9, 13], [10, 14], [11, 15], [12, 16], [17, 18], [19, 20], [21, 22], [23, 24], [17, 19], [18, 20], [21, 23], [22, 24], [17, 21], [18, 22], [19, 23], [20, 24], [25, 26], [27, 28], [29, 30], [31, 32], [25, 27], [26, 28], [29, 31], [30, 32], [25, 29], [26, 30], [27, 31], [28, 32]]

GL.VIEW([ GL.GLPol(V,CV, GL.COLORS[1]) ]);
cop_EV = Lar.coboundary_0(EV::Lar.Cells);
cop_FE = Lar.coboundary_1(V, FV::Lar.Cells, EV::Lar.Cells);
W = convert(Lar.Points, V');#cobordo 1
V, copEV, copFE, copCF = Lar.Arrangement.spatial_arrangement(W::Lar.Points, cop_EV::Lar.ChainOp, cop_FE::Lar.ChainOp);
triangulated_faces = Lar.triangulate2D(V, [copEV, copFE]);
FVs = convert(Array{Lar.Cells}, triangulated_faces);
VVV = convert(Lar.Points, V');
GL.VIEW( GL.GLExplode(VVV,FVs,1,1,1,99,1) );
EVs = Lar.FV2EVs(copEV, copFE); # polygonal face fragments
GL.VIEW( GL.GLExplode(VVV,EVs,1.5,1.5,1.5,99,1) );

store=[]
V, (VV, EV, FV, CV) = Lar.cuboid([1,1,1], true);
mybox = (V,CV,FV,EV);
str = Lar.Struct([ mybox ])
obj = Lar.struct2lar(str)
push!(store, obj)
V, (VV, EV, FV, CV) = Lar.cuboid([0.5,0.5,0.5], true);
mybox = (V,CV,FV,EV);
str = Lar.Struct([ mybox ])
obj = Lar.struct2lar(str)
push!(store, obj)
str = Lar.Struct(store);
V,CV,FV,EV = Lar.struct2lar(str);
GL.VIEW([ GL.GLPol(V,CV, GL.COLORS[1]) ]);
cop_EV = Lar.coboundary_0(EV::Lar.Cells);
cop_FE = Lar.coboundary_1(V, FV::Lar.Cells, EV::Lar.Cells);
W=convert(Lar.Points,V')
V, copEV, copFE, copCF = Lar.Arrangement.spatial_arrangement(W::Lar.Points, cop_EV::Lar.ChainOp, cop_FE::Lar.ChainOp);
triangulated_faces = Lar.triangulate2D(V, [copEV, copFE]);
FVs = convert(Array{Lar.Cells}, triangulated_faces);
VVV = convert(Lar.Points, V');
try
    GL.VIEW( GL.GLExplode(VVV,FVs,1,1,1,99,1) );
catch
    e="visualizzazione errata causa triangolazione errata"
    @show FVs
    println("La presenza di array vuoti indica la mal riuscita della triangolazione")
finally
    temp=[]
    for x in FVs
       if !isempty(x)
           push!(temp, x)
       end
    end
    GL.VIEW( GL.GLExplode(VVV,temp,1,1,1,99,1) );
end


store=[]
V, (VV, EV, FV, CV) = Lar.cuboid([1,1,1], true);
mybox = (V,CV,FV,EV);
str = Lar.Struct([ mybox ])
obj = Lar.struct2lar(str)
push!(store, obj)
V, (VV, EV, FV, CV) = Lar.cuboid([0.5,0.5,0.5], true);
mybox = (V,CV,FV,EV);
transl = Lar.t(0.25,0.25,0.25)
str = Lar.Struct([ transl, mybox ])
obj = Lar.struct2lar(str)
push!(store, obj)
str = Lar.Struct(store);
V,CV,FV,EV = Lar.struct2lar(str);
GL.VIEW([ GL.GLPol(V,CV, GL.COLORS[1]) ]);
cop_EV = Lar.coboundary_0(EV::Lar.Cells);
cop_FE = Lar.coboundary_1(V, FV::Lar.Cells, EV::Lar.Cells);
W=convert(Lar.Points,V')
V, copEV, copFE, copCF = Lar.Arrangement.spatial_arrangement(W::Lar.Points, cop_EV::Lar.ChainOp, cop_FE::Lar.ChainOp);
triangulated_faces = Lar.triangulate2D(V, [copEV, copFE]);
FVs = convert(Array{Lar.Cells}, triangulated_faces);
VVV = convert(Lar.Points, V');
try
    GL.VIEW( GL.GLExplode(VVV,FVs,1,1,1,99,1) );
catch
    e="visualizzazione errata causa triangolazione errata"
    @show FVs
    println("La presenza di array vuoti indica la mal riuscita della triangolazione")
finally
    temp=[]
    for x in FVs
       if !isempty(x)
           push!(temp, x)
       end
    end
    GL.VIEW( GL.GLExplode(VVV,temp,1,1,1,99,1) );
end
