# Hierarchical graphs of cellular complexes


Hierarchical models of complex assemblies are generated by an aggregation of geometric subassemblies (cellular complexes), each one defined in a local coordinate system, and relocated by affine transformations of coordinates.  This operation may be repeated hierarchically, with some subassemblies defined by aggregation of simpler parts, and so on, until one obtains a set of elementary components, which cannot be further decomposed.

Two main advantages can be found in a hierarchical modeling approach. Each elementary part and each assembly, at every hierarchical level, are defined independently from each other, using a local coordinate frame, suitably chosen to make its definition easier. Furthermore, only one copy of each component is stored in the memory, and may be instanced in different locations and orientations how many times it is needed.


## Hierarchical graphs

A [hierarchical model](#structure), defined inductively as an assembly of component parts, is described by an *acyclic directed multigraph*, often called a *scene graph* or *hierarchical structure* in computer graphics and modeling.  The main algorithm with hierarchical assemblies is the *traversal* function, which transforms every component from *local coordinates* to global coordinates, called *world coordinates*.

### Acyclic directed-multigraph

The standard definition of a *directed graph* $G$ states that it is a pair $(N,A)$, where $N$ is a set of *nodes* and $A$ is a set of directed *arcs*, given as ordered pairs of nodes.  Such a definition is not sufficient when more than one arc must be considered between the same pair of nodes.

In this case the notion of *multigraph* is introduced.  A *directed multigraph* is a triplet $G := (N,A,f)$ where $N$ and $A$ are sets of nodes and arcs, respectively, and $f: A \to mathbf{N}^{2}$ is a mapping from arcs to node pairs.  In other words, in a multigraph, the same pair of nodes can be connected by multiple arcs.

Directed graphs or multigraphs are said to be *acyclic* when they do not contain cycles, i.e. when no path starts and ends at the same vertex.  *Trees* are common examples of acyclic graphs. A tree, where each non-leaf node is the root of a subtree, is the best model of the concept of *hierarchy*. Nodes in a tree can be associated with their integer *distance* from the root, defined by the number of edges on the unique path from the root to the node.  A tree can be layered by *levels*, by putting in the same subset (level) all the nodes with equal distance from the root.  

Acyclic graphs/multigraphs are also called *hierarchical graphs*, because they can be associated to a tree, generated at run-time by visiting the graph with some standard traversal algorithm, e.g. with a depth-first-search.  The ordered sequence of nodes produced by the traversal is sometimes called a *linearized graph*.  Each node in this sequence is suitably transformed from local coordinates to *world coordinates*, i.e. to the coordinates of the root, by the traversal algorithm.


##  Hierarchical structures

Various kinds of hierarchical assemblies are used in standard graphical systems, such as *GKS*, *PHIGS* and *VRML*, as well as in graphics libraries like *Open Inventor* and *Java 3D*.  The model of hierarchical structures adopted here is inspired, even in the name of the function used for this purpose, by the one introduced by *PHIGS*, i.e. `struct`.

The arcs of scene graphs are normally specified *implicitly* in real graphical systems.  For example, an arc is actually specified when a node is contained or referred within another one. In particular, it is possible to specify a new container node together with either the matrix or the parameters of the transformation to be associated with the the arc that connects the new container to the current node.

A *container* of geometrical objects is defined here by applying the function `struct` to the array of contained objects.  The value returned from such application is of the *cellular complex* type.  The coordinate system of the value returned from a `struct` application is the one associated with the first object of the argument sequence.  Also, the resulting geometrical value is often associated with a symbol used as the name of the container, as in


