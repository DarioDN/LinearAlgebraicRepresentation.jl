using LinearAlgebraicRepresentation
using Plasm
Lar = LinearAlgebraicRepresentation

"""
	input_collection(data::Array)::Tuple

*Facet selection*. Construction of a ``(d-1)``-dimensional collection from a ``(d-1)``- 
or ``d``-dimensional one. ``0-chain`` of `LAR` type are used as *input*.

*Output* is ``admissible input`` for algorithms of the *2D/3D arrangement* pipeline.

# Example 2D

An assembly of geometric objects is generated, and their assembly, including rotated 
and translated chains, is built producing a collection of input LAR models.

```julia
V,(_,EV,FV) = Lar.cuboidGrid([4,4],true);
W,(_,EW,FW) = Lar.cuboidGrid([3,5],true);
mycircle(r,n) = Lar.circle(r)(n)

data2d1 = (V,EV)
data2d2 = Lar.Struct([ Lar.t(2,2), Lar.r(pi/3), Lar.t(-1.5,-2.5), (W,EW) ])
data2d3 = Lar.Struct([ Lar.t(2,2), mycircle(2.5,16) ])
data2d4 = Lar.Struct([ Lar.t(3.5,3.5), mycircle(.25,16) ])
data2d5 = Lar.Struct([ Lar.t(5,3.5), mycircle(.5,16) ])
data2d6 = Lar.Struct([ Lar.t(5,3.5), mycircle(.25,16) ])

model2d = input_collection( [ data2d1, data2d2, data2d3, data2d4, data2d5, data2d6 ] )
V,EV = model2d
VV = [[k] for k in 1:size(V,2)];
Plasm.view( Plasm.numbering(.3)((V,[VV, EV])) )
```
Note that `V,EV` is not a cellular complex, since 1-cells intersect out of 0-cells.

# Example 3D

```julia
V,FV = Lar.sphere(2)([3,4])
EV = Lar.simplexFacets(FV)
mysphere = V,FV,EV

data3d1 = mysphere
data3d2 = Lar.Struct([ Lar.t(0,1,0), mysphere ])
data3d3 = Lar.Struct([ Lar.t(0,0.5,0), Lar.s(0.4,0.4,0.4), mysphere ])
data3d4 = Lar.Struct([ Lar.t(4,0,0), Lar.s(0.8,0.8,0.8), mysphere ])
data3d5 = Lar.Struct([ Lar.t(4,0,0), Lar.s(0.4,0.4,0.4), mysphere ])

model3d = input_collection([ data3d1, data3d2, data3d3, data3d4, data3d5 ])
V,FV,EV = model3d
VV = [[k] for k in 1:size(V,2)];
Plasm.view( Plasm.numbering(.6)((V,[VV, EV])) )
```

Note that `V,FV,EV` is not a cellular complex, since 1-cells and
2-cells intersect out of 0-cells.

"""
function input_collection(data::Array)::Lar.LAR
	assembly = Lar.Struct(data)
	return Lar.struct2lar(assembly)
end




"""
	indexing(model::Lar.LAR)
	
*Spatial index* made by ``d`` *interval-trees* on 
bounding boxes of ``sigma in S_{d−1}``. Spatial queries solved by
intersection of ``d`` queries on IntervalTrees generated by
bounding-boxes of geometric objects (LAR cells).

# Example 2D

```julia
model = model2d
xs,ys =  indexing(model2d);
```

# Example 3D

```julia
model = model3d
xs,ys,zs =  indexing(model3d);
```
"""
function indexing(model)
	V,CV = model[1:2]
	dim = size(V,1)
	@assert length(model) == dim  #n. chains == dim space
	
	cellpoints = [ V[:,CV[k]]::Lar.Points for k=1:length(CV) ]
	bboxes = [Lar.bbox(cell) for cell in cellpoints]
	intervals = [IntervalValue{Float64,Int}[] for k=1:dim]

	for k=1:dim
		for (b,box) in enumerate(bboxes)
			push!(intervals[k], IntervalValue{Float64,Int}(box[1][k], box[2][k], b))
		end
	end
	map(sort!, intervals)
	
	xs = IntervalTree{Float64, IntervalValue{Float64,Int}}(intervals[1])
	ys = IntervalTree{Float64, IntervalValue{Float64,Int}}(intervals[2])
	if dim == 3
		zs = IntervalTree{Float64, IntervalValue{Float64,Int}}(intervals[3])
	end
	if dim==2 return (xs,ys)
	elseif dim==3 return (xs,ys,zs) 
	end
end



"""
	decomposition()::
	
Pairwise z = 0 *intersection* of *line segments* in ``σ ∪ I(σ)``, for each ``σ ∈ Sd−1``.

# Example

```julia
julia> 
```
"""
function decomposition(model2d::Lar.LAR)::Array{Lar.LAR}

end



"""
	Congruence()::
Graded bases of equivalence classes Ck (Uk ), with Uk = Xk /Rk for 0 ≤ k ≤ 2.

# Example

```julia
julia> 
```
"""
function Congruence 

end



"""
	Connection()::
Extraction of (X p , ∂p ), maximal connected components of Xd −1 (0 ≤ p ≤ h). d−1 d−1 +p

# Example

```julia
julia> 
```
"""
function Connection 

end



"""
	Bases()::
Computation of redundant cycle basis [∂d ] for each p-component, via TGW. 

# Example

```julia
julia> 
```
"""
function Bases 

end



"""
	Boundaries()::
Accumulation into H += [o]p (hole-set) of outer boundary cycle from each [∂d+]p . 

# Example

```julia
julia> 
```
"""
function Boundaries 

end



"""
	Containment()::
Computation of antisymmetric containment relation S between [o]p holes in H. 

# Example

```julia
julia> 
```
"""
function Containment 

end



"""
	Reduction()::
Transitive R reduction of S and generation of forest of flat trees ⟨[od ]p , [∂d ]p ⟩. 

# Example

```julia
julia> 
```
"""
function Reduction 

end



"""
	Adjoining()::
of roots [od ]r to (unique) outer cell, and non-roots [∂d+]q to container cells. 

# Example

```julia
julia> 
```
"""
function Adjoining 

end



"""
	Assembling()::
Quasi-block-diagonal assembly of matrices relatives to isolated components [∂d ]p . 

# Example

```julia
julia> 
```
"""
function Assembling 

end



"""
	Output()::
Global boundary map [∂d ] of A(Sd−1), and reconstruction of 0-chains of d-cells in Xd .

# Example

```julia
julia> 
```
"""
function Output 

end



