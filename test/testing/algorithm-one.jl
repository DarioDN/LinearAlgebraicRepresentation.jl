using LinearAlgebraicRepresentation
using Plasm
Lar = LinearAlgebraicRepresentation

(V, EV, FV) = ([0.0 0.0 0.0 0.0 1.0 1.0 1.0 0.25 0.25 0.5 0.5 1.0 0.25 0.25 0.5 0.5 0.25 0.25 0.25 0.25 0.5 0.5 0.5 0.5; 0.0 0.0 1.0 1.0 0.0 0.0 1.0 0.25 0.75 0.25 0.75 1.0 0.25 0.75 0.25 0.75 0.25 0.25 0.75 0.75 0.25 0.25 0.75 0.75; 0.0 1.0 0.0 1.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 1.0 1.0 1.0 1.0 1.0 -0.25 1.25 -0.25 1.25 -0.25 1.25 -0.25 1.25], Array{Int64,1}[[1, 2], [1, 3], [2, 4], [3, 4], [1, 5], [2, 6], [5, 6], [3, 7], [5, 7], [8, 9], [8, 10], [9, 11], [10, 11], [4, 12], [6, 12], [13, 14], [13, 15], [14, 16], [15, 16], [7, 12], [8, 17], [8, 13], [13, 18], [17, 19], [18, 20], [9, 19], [9, 14], [14, 20], [17, 21], [18, 22], [10, 21], [10, 15], [15, 22], [19, 23], [21, 23], [20, 24], [22, 24], [11, 23], [11, 16], [16, 24]], #,    [4,14],[3,9]], 
Array{Int64,1}[[4, 2, 3, 1], [2, 5, 6, 1], [7, 9, 10, 3, 11, 5, 8, 1], [9, 10, 11, 8], [4, 13, 14, 2, 16, 15, 6, 12], [13, 14, 16, 15], [7, 4, 3, 12], [7, 5, 6, 12], [9, 19, 17, 8], [9, 13, 14, 8], [20, 13, 14, 18], [10, 17, 8, 21], [13, 10, 8, 15], [13, 15, 22, 18], [23, 19, 17, 21], [20, 24, 22, 18], [23, 9, 19, 11], [9, 14, 16, 11], [24, 14, 16, 20], [23, 10, 11, 21], [10, 16, 11, 15], [16, 15, 22, 24]])

Plasm.view(Plasm.numbering(.25)((V,[[[k] for k=1:size(V,2)],EV,FV])))   


V,(EV,FV,CV),(copEV,copFE,copCF) = Lar.chaincomplex( V, FV, EV )




W,FW,EW = V,FV,EV

copFE = Lar.build_copFE(V,FV,EV)
Matrix(copFE)
copFC = Lar.build_copFC(V,FV,EV,copFE)
Matrix(copFC)



using LinearAlgebraicRepresentation
using Plasm
Lar = LinearAlgebraicRepresentation

(V, FV, EV) = ([0.0 0.0 0.0 0.0 1.0 1.0 1.0 0.25 0.25 0.5 0.5 1.0 0.25 0.25 0.5 0.5 0.25 0.25 0.25 0.25 0.5 0.5 0.5 0.5; 0.0 0.0 1.0 1.0 0.0 0.0 1.0 0.25 0.75 0.25 0.75 1.0 0.25 0.75 0.25 0.75 0.25 0.75 0.25 0.75 0.25 0.25 0.75 0.75; 0.0 1.0 0.0 1.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 1.0 1.0 1.0 1.0 1.0 -0.25 -0.25 1.25 1.25 -0.25 1.25 -0.25 1.25], Array{Int64,1}[[1, 2, 3, 4], [1, 2, 5, 6], [1, 3, 5, 7, 8, 9, 10, 11], [2, 4, 6, 12, 13, 14, 15, 16], [3, 4, 7, 12], [5, 6, 7, 12], [8, 9, 10, 11], [8, 9, 13, 14], [8, 9, 17, 18], [8, 10, 13, 15], [8, 10, 17, 21], [9, 11, 14, 16], [9, 11, 18, 23], [10, 11, 15, 16], [10, 11, 21, 23], [13, 14, 15, 16], [13, 14, 19, 20], [13, 15, 19, 22], [14, 16, 20, 24], [15, 16, 22, 24], [17, 18, 21, 23], [19, 20, 22, 24]], Array{Int64,1}[[1, 2], [1, 3], [1, 5], [2, 4], [2, 6], [3, 4], [3, 7], [4, 12], [5, 6], [5, 7], [6, 12], [7, 12], [8, 9], [8, 10], [8, 13], [8, 17], [9, 11], [9, 14], [9, 18], [10, 11], [10, 15], [10, 21], [11, 16], [11, 23], [13, 14], [13, 15], [13, 19], [14, 16], [14, 20], [15, 16], [15, 22], [16, 24], [17, 18], [17, 21], [18, 23], [19, 20], [19, 22], [20, 24], [21, 23], [22, 24]])

#Plasm.view(Plasm.numbering(.25)((V,[[[k] for k=1:size(V,2)],EV,FV])))   

V,(EV,FV,CV),(copEV,copFE,copCF) = Lar.chaincomplex( V, FV, EV )

copFE = Lar.build_copFE(V,FV,EV)
Matrix(copFE)

copFC = Lar.build_copFC(V,FV,EV,copFE)
Matrix(copFC)









using LinearAlgebraicRepresentation
using Plasm
Lar = LinearAlgebraicRepresentation


(V, FV, EV) = ([0.0 0.0 0.0 0.0 1.0 1.0 1.0 0.25 0.5 0.25 0.5 1.0 0.25 0.5 0.25 0.5 0.25 0.25 0.25 0.25 0.5 0.5 0.5 0.5; 0.0 0.0 1.0 1.0 0.0 0.0 1.0 1.0 1.0 0.9 0.9 1.0 1.0 1.0 0.9 0.9 0.9 0.9 1.4 1.4 0.9 0.9 1.4 1.4; 0.0 1.0 0.0 1.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 1.0 1.0 1.0 1.0 1.0 -0.25 1.25 -0.25 1.25 -0.25 1.25 -0.25 1.25], Array{Int64,1}[[1, 2, 3, 4], [1, 2, 5, 6], [1, 3, 5, 7, 8, 9, 10, 11], [2, 4, 6, 12, 13, 14, 15, 16], [3, 4, 8, 13], [5, 6, 7, 12], [7, 9, 12, 14], [8, 9, 10, 11], [8, 9, 13, 14], [8, 10, 13, 15], [8, 10, 13, 15, 17, 18, 19, 20], [9, 11, 14, 16], [9, 11, 14, 16, 21, 22, 23, 24], [10, 11, 15, 16], [10, 11, 17, 21], [13, 14, 15, 16], [15, 16, 18, 22], [17, 19, 21, 23], [18, 20, 22, 24], [19, 20, 23, 24]], Array{Int64,1}[[1, 2], [1, 3], [1, 5], [2, 4], [2, 6], [3, 4], [3, 8], [4, 13], [5, 6], [5, 7], [6, 12], [7, 9], [7, 12], [8, 9], [8, 10], [8, 13], [9, 11], [9, 14], [10, 11], [10, 15], [10, 17], [11, 16], [11, 21], [12, 14], [13, 14], [13, 15], [14, 16], [15, 16], [15, 18], [16, 22], [17, 19], [17, 21], [18, 20], [18, 22], [19, 20], [19, 23], [20, 24], [21, 23], [22, 24], [23, 24]])

Plasm.view(Plasm.numbering(.25)((V,[[[k] for k=1:size(V,2)],EV,FV])))   
